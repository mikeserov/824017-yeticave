pwd  текущая папка
cd  перейти в папку
cd - вернуться в пред.папку.
cd .. подняться на уровень выше
cd ../../ подняться на два уровня выше.
ls список файлов в папке
cd ~ в домашнюю папку
ls -1 cmder посмотреть файлы в папке cmder столбиком
start . открыть в проводнике текущую папку
git config --global user.name "Михаил"
git config --global user.email "serov.m@yandex.ru"
git config --list (проверить что назначились имя и имэйл)
cat ~/.gitconfig (посмотртеть внесенную в гитконфиг информацию)
git init инициализировать пустой репозиторий
ls -1 -a показать все файлы в папке столбиком, в. т.ч. скрытые.
git status посмотреть на какой ветке, и какие файлы отслеживаемые
git add (наименование файла) (наименование файла) добавить файлы в отслеживаемые
git add . добавить в отслеживаемые всю папку
git commit -m "начали вести историю" создать коммит.
git diff показать, что изменилось (непроиндексированные изменения)
git log история коммитов (закрыть лог клавишей q)
git show (хэш коммита) показать, какие изменения сделаны в коммите
git checkout (имя файла) откатить изменения файла, до чекаута(вернуться вперед)
нельзя.
git checkout (хэш коммита) (имя файла) откатить изменения файла
до состояния опр.коммита
git diff --staged (посмотреть проиндексированные изменения)
git reset HEAD index.html снять индексацию изменения с файла index.html,
то есть сделать не отслеживаемым.
git log -1 показать только последний коммит. -2 два последних и т.д.
git commit --amend -m 'правильное наименование' скорретировать наименование
последнего коммита (точнее создать новые коммит с теми же изменениями, но
уже с правильным наименованием, то есть заменить старый коммит на новый)
git rm (имя файла) удалить файл из коммита.
git commit --amend --no-edit сохранить новый коммит в замен последнего,
без изменения имени.
git rm --cashed css/test.css(путь к файлу) удалить изменение из коммита,
но! не сам файл.
git help (наименование комманды) посмотреть справку по комманде.
git log --oneline вывести коммиты построчно.
git cat-file -p (хэш) показать содержимое комита
tree состояние файлов на момент коммита. parent хэш предыдущего коммита.
git checkout (хэш коммита) переключиться на сохранение/коммит.
git checkout -b (наименование указателя) (хэш коммита) переместиться в 
коммит и создать указатель.
git log --oneline --all посмотреть коммиты не только до текущего, но и все
(т.е. последующие)
git log --oneline --all --graph показать все коммиты схемой.
git merge (наименование ветки/указателя) -m 'сообщение коммита'
влить в текущую ветку другую и создать коммит.
git checkout -b (наименование указателя) создать ветку/указатель
git merge (наименование ветки/указателя) влить в текущую ветку другую

если при конфликте в одной ветке файл удален, а в другой есть,
то git add (имя файла) оставить файл
или git rm (имя файла) удалить файл

git remote add origin (ssh ссылка) добавить удаленный репозиторий с
именем origin
git remote add alice (ssh ссылка на реп.Алисы) добавить себе
удаленный репозиторий Алисы
git remote -v проверить, что репозиторий добавился (появятся
ссылки fetch и push)
mkdir ~/.ssh создать в домашней папке папку ssh
ssh-keygen -t rsa -b 4096 -C "alice@htmlacademy.ru" сгенерировать ssh ключ
появятся два ключа (наим.) и (наим.).pub
cat (наим.).pub вывести содержимое ключа
ssh -T -i ~/.ssh/(наим.) git@github.com проверить, узнает ли нас гитхаб,
после того как мы добавили публичный ключ в лк на сайте.

vim ~/.ssh/config создать файл и внести в него настройку, чтобы наш
приватный ключ автоматически использовался для хоста github.com
Host github.com
	IdentityFile ~/.ssh/(наим.)

ssh -T git@github.com пробуем соединиться, проверяем используется автоматически
наш приватный ключ.

git clone ssh-адрес стянуть на комп из своего репозитория свой проект.

git commit -a -m 'сообщение коммита' проиндексировать имеющиеся
изменения и закоммитить одновременно.
git push origin master отправить изменения в удаленный реп.оригин
по ветке мастер.
git push origin cmments:comments отправить в удаленный реп. ветку
с правильным имененем на место ветки с неправильным им-м.
git push origin :cmments отправить в уд.реп. ничего на место ветки
с неправильным именем. (ветка с непр.им. удалится)
git brunch -m comments переименовать текущую ветку с неправильным им-м
cmments в comments
git pull origin master стянуть себе из реп. ветку master (находясь
в ветке master локально)
git checkout comments переключиться на ветку comments
git fetch origin стянуть на комп удаленный репозиторий с именем origin
git checkout -b comments origin/comments создать локально указатель comments на
стянутой из реп. ветке origin/comments
git branch --set-upstream-to=origin/comments связать текущую ветку comments
с веткой уд.реп-я origin/comments
git branch -vv посмотреть какие локальные ветки с какими
удаленными связаны (очень подробно-vv)
после связки можно просто сделать git push и изменение отправится в привязанную
ветку
git push -u origin share-icons внести в уд.реп-й оригин ветку share-icons и
связать с локальной веткой share-icons (поэтому здесь -u)
g
